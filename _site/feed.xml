<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-19T15:52:36+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jeong Hun’s Blog</title><subtitle>Let&apos;s share for sustainability.</subtitle><author><name>Jeong Hun Jo</name><email>tmvle22@gmail.com</email></author><entry><title type="html">Python 함수: 위치 인수와 언패킹 사용하기</title><link href="http://localhost:4000/python/variable-arguments/" rel="alternate" type="text/html" title="Python 함수: 위치 인수와 언패킹 사용하기" /><published>2022-05-10T00:00:00+09:00</published><updated>2022-05-10T00:00:00+09:00</updated><id>http://localhost:4000/python/variable-arguments</id><content type="html" xml:base="http://localhost:4000/python/variable-arguments/"><![CDATA[<h1 id="python-함수-위치-인수와-언패킹-사용하기">[Python] 함수: 위치 인수와 언패킹 사용하기</h1>

<p>완료: Yes
태그: 이론, 코드, 파이썬</p>

<p>함수에 위치인수 사용하기</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Parameter를 입력한 순서대로 함수를 사용시 입력하는 변수값이 적용됨.
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">print_numbers</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
		<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
		<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
		<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="c1"># 사용
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">print_numbers</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
</code></pre></div></div>

<p>인수를 순서대로 넣을 땐 Unpacking 사용 가능</p>

<p>위치 인수 ➡ <code class="language-plaintext highlighter-rouge">List</code> or <code class="language-plaintext highlighter-rouge">Tuple</code> 사용 가능</p>

<p>Unpacking ➡ <code class="language-plaintext highlighter-rouge">’*’</code>을 붙여준다.</p>

<p>⚠️ 함수의 매개변수 개수 == 리스트(튜플)의 요소 개수</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">print_numbers</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">print_numbers</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
</code></pre></div></div>

<p><strong>가변 인수 함수 (Variable argument)</strong></p>

<p>같은 함수에 넣을 인수의 개수가 정해지지 않았을 때 위치인수와 Unpacking사용.</p>

<p><code class="language-plaintext highlighter-rouge">def function_name(*args):</code></p>

<p>여러개의 인수를 직접 넣거나</p>

<p>언패킹을 사용한다 (<code class="language-plaintext highlighter-rouge">’*’</code>잊지 말기)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">print_numbers</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
		<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">args</span><span class="p">:</span>
		<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>

<span class="c1"># 사용
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">print_numbers</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">print_numbers</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">])</span>
</code></pre></div></div>

<p><strong>고정 인수와 가변 인수를 함께 사용하기</strong></p>

<p>⚠️ 고정매개변수가 항상 가변인수 앞에 위치한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">print_numbers</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">print_numbers</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">print_numbers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="mi">1</span>
<span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">print_numbers</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">])</span>
<span class="mi">10</span>
<span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
</code></pre></div></div>

<p>인수와 순서를 다 외우기 어려우니 <code class="language-plaintext highlighter-rouge">키워드 인수(Keyword argument)</code> 사용</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">personal_info</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">address</span><span class="p">):</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="s">'이름: '</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="s">'나이: '</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="s">'주소: '</span><span class="p">,</span> <span class="n">address</span><span class="p">)</span>

<span class="c1"># 키워드 인수를 사용하면 순서를 지켜서 넣지 않아도 괜찮다.
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">personal_info</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'홍길동'</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">address</span><span class="o">=</span><span class="s">'서울시 용산구 이촌동'</span><span class="p">)</span>
<span class="n">이름</span><span class="p">:</span>  <span class="n">홍길동</span>
<span class="n">나이</span><span class="p">:</span>  <span class="mi">30</span>
<span class="n">주소</span><span class="p">:</span>  <span class="n">서울시</span> <span class="n">용산구</span> <span class="n">이촌동</span>
</code></pre></div></div>

<p><strong>딕셔너리 언패킹</strong></p>

<p>언패킹엔 <code class="language-plaintext highlighter-rouge">'**'</code>을 사용한다.</p>

<p>⚠️ 함수의 매개변수 이름 == 딕셔너리의 Key 이름</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">personal_info</span><span class="p">(</span><span class="o">**</span><span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'홍길동'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">'address'</span><span class="p">:</span> <span class="s">'서울시 용산구 이촌동'</span><span class="p">})</span>
<span class="n">이름</span><span class="p">:</span>  <span class="n">홍길동</span>
<span class="n">나이</span><span class="p">:</span>  <span class="mi">30</span>
<span class="n">주소</span><span class="p">:</span>  <span class="n">서울시</span> <span class="n">용산구</span> <span class="n">이촌동</span>
</code></pre></div></div>

<p>Keyword argument와 가변인수 사용</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">personal_info</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="p">...</span>     <span class="k">for</span> <span class="n">kw</span><span class="p">,</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">.</span><span class="n">items</span><span class="p">():</span> <span class="c1">#.items()로 딕셔너리의 key: value 쌍을 호출한다.
</span><span class="p">...</span>         <span class="k">print</span><span class="p">(</span><span class="n">kw</span><span class="p">,</span> <span class="s">':'</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>

<span class="c1"># 값을 한 개 넣어도 되고 여러개 넣어도 된다.
</span></code></pre></div></div>

<p>보통 <code class="language-plaintext highlighter-rouge">**kwargs의 사용</code>은 함수 안에 특정 키가 있는지 확인하도록 하고 기능을 넣을 때 사용한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">personal_info</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">if</span> <span class="s">'name'</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">:</span>    <span class="c1"># in으로 딕셔너리 안에 특정 키가 있는지 확인
</span>        <span class="k">print</span><span class="p">(</span><span class="s">'이름: '</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">[</span><span class="s">'name'</span><span class="p">])</span>
    <span class="k">if</span> <span class="s">'age'</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'나이: '</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">[</span><span class="s">'age'</span><span class="p">])</span>
    <span class="k">if</span> <span class="s">'address'</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'주소: '</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">[</span><span class="s">'address'</span><span class="p">])</span>
</code></pre></div></div>

<p>역시 마찬가지로, 고정인수와 가변인수를 동시에 사용할 수 있다.</p>

<p>항상 고정인수가 가변인수를 앞선다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">personal_info</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span>
<span class="p">...</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">personal_info</span><span class="p">(</span><span class="s">'홍길동'</span><span class="p">)</span>
<span class="n">홍길동</span>
<span class="p">{}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">personal_info</span><span class="p">(</span><span class="s">'홍길동'</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">address</span><span class="o">=</span><span class="s">'서울시 용산구 이촌동'</span><span class="p">)</span>
<span class="n">홍길동</span>
<span class="p">{</span><span class="s">'age'</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">'address'</span><span class="p">:</span> <span class="s">'서울시 용산구 이촌동'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">personal_info</span><span class="p">(</span><span class="o">**</span><span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'홍길동'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">'address'</span><span class="p">:</span> <span class="s">'서울시 용산구 이촌동'</span><span class="p">})</span>
<span class="n">홍길동</span>
<span class="p">{</span><span class="s">'age'</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">'address'</span><span class="p">:</span> <span class="s">'서울시 용산구 이촌동'</span><span class="p">}</span>

<span class="c1"># 위치인수와 키워드인수를 동시에 사용할 수 있다.
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">custom_print</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
<span class="p">...</span>
</code></pre></div></div>

<p>매개변수에 초깃값 지정하기</p>

<p>주로 사용하는 값이 있고 가끔만 변경이 필요할 때</p>

<p><code class="language-plaintext highlighter-rouge">def func_name(para=”val”)</code></p>

<p>초깃값을 지정한 매개변수 자리는 비워두고 함수를 호출할 수 있다.
⚠️ 초깃값을 지정한 매개변수는 항상 마지막에 온다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">personal_info</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">address</span><span class="o">=</span><span class="s">"비공개"</span><span class="p">):</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">korean</span><span class="p">,</span> <span class="n">english</span><span class="p">,</span> <span class="n">mathematics</span><span class="p">,</span> <span class="n">science</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">91</span>

<span class="k">def</span> <span class="nf">max_score</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
		<span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>

<span class="n">max_score</span> <span class="o">=</span> <span class="n">get_max_score</span><span class="p">(</span><span class="n">korean</span><span class="p">,</span> <span class="n">english</span><span class="p">,</span> <span class="n">mathematics</span><span class="p">,</span> <span class="n">science</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'높은 점수:'</span><span class="p">,</span> <span class="n">max_score</span><span class="p">)</span>
 
<span class="n">max_score</span> <span class="o">=</span> <span class="n">get_max_score</span><span class="p">(</span><span class="n">english</span><span class="p">,</span> <span class="n">science</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'높은 점수:'</span><span class="p">,</span> <span class="n">max_score</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">korean</span><span class="p">,</span> <span class="n">english</span><span class="p">,</span> <span class="n">mathematics</span><span class="p">,</span> <span class="n">science</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>

<span class="c1"># 주어지는 인수는 여러개, 사용시마다 입력하는 인수 개수는 다 다르다.
# 가변 인수를 사용한다.
# 작성해야 하는 필요한 함수의 이름은 get_min_max, get_average이다.
# get_min_max는 args를 사용하며 한번에 ','로 구분된 두 개의 값을 반환해야 한다.
# get_average는 kwargs를 사용하며 kwargs의 인수 개수에 따라 평균을 구해야 한다.
# min_score, max_score, average_score는 아래에서 함수 값을 이용해 지정해주고 있으므로
# 함수가 직접 값을 반환해줘야 한다, return.
</span>
<span class="o">---</span>
<span class="c1"># 정답 작성 창
</span>
<span class="k">def</span> <span class="nf">get_min_max</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
				<span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">args</span><span class="p">),</span> <span class="nb">max</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_average</span><span class="p">(</span><span class="o">*</span><span class="n">kwargs</span><span class="p">):</span>
				<span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">kwargs</span><span class="p">.</span><span class="n">values</span><span class="p">())</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span>
<span class="o">---</span>

<span class="n">min_score</span><span class="p">,</span> <span class="n">max_score</span> <span class="o">=</span> <span class="n">get_min_max_score</span><span class="p">(</span><span class="n">korean</span><span class="p">,</span> <span class="n">english</span><span class="p">,</span> <span class="n">mathematics</span><span class="p">,</span> <span class="n">science</span><span class="p">)</span>

<span class="n">average_score</span> <span class="o">=</span> <span class="n">get_average</span><span class="p">(</span><span class="n">korean</span><span class="o">=</span><span class="n">korean</span><span class="p">,</span> <span class="n">english</span><span class="o">=</span><span class="n">english</span><span class="p">,</span>
                            <span class="n">mathematics</span><span class="o">=</span><span class="n">mathematics</span><span class="p">,</span> <span class="n">science</span><span class="o">=</span><span class="n">science</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'낮은 점수: {0:.2f}, 높은 점수: {1:.2f}, 평균 점수: {2:.2f}'</span>
      <span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">min_score</span><span class="p">,</span> <span class="n">max_score</span><span class="p">,</span> <span class="n">average_score</span><span class="p">))</span>
 
<span class="n">min_score</span><span class="p">,</span> <span class="n">max_score</span> <span class="o">=</span> <span class="n">get_min_max_score</span><span class="p">(</span><span class="n">english</span><span class="p">,</span> <span class="n">science</span><span class="p">)</span>

<span class="n">average_score</span> <span class="o">=</span> <span class="n">get_average</span><span class="p">(</span><span class="n">english</span><span class="o">=</span><span class="n">english</span><span class="p">,</span> <span class="n">science</span><span class="o">=</span><span class="n">science</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'낮은 점수: {0:.2f}, 높은 점수: {1:.2f}, 평균 점수: {2:.2f}'</span>
      <span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">min_score</span><span class="p">,</span> <span class="n">max_score</span><span class="p">,</span> <span class="n">average_score</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name>Jeong Hun Jo</name><email>tmvle22@gmail.com</email></author><category term="python" /><category term="python" /><summary type="html"><![CDATA[Python: Using Variable Arguments]]></summary></entry><entry><title type="html">왜 (__name__)을 Flask class로 넘길까?</title><link href="http://localhost:4000/python/name-flask/" rel="alternate" type="text/html" title="왜 (__name__)을 Flask class로 넘길까?" /><published>2022-04-24T00:00:00+09:00</published><updated>2022-04-24T00:00:00+09:00</updated><id>http://localhost:4000/python/name-flask</id><content type="html" xml:base="http://localhost:4000/python/name-flask/"><![CDATA[<p><span style=" font-family: 'Gothic A1', sans-serif;font-size: 25px; font-weight: 500;">[app = Flask(<strong>name</strong>)]</span></p>

<p><span style="font-weight: 500;">Flask를 사용하게 되면 Flask(<strong>name</strong>)이라는 놈을 선언하게 된다. 무슨 역할을 하는 놈인지 한 번 알아보았다.</span></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</code></pre></div></div>

<p style="font-weight: 500;"><br />
<span style="font-size: 1.25rem;">Flask에 (__name__)을 인자로 넘겨준다.</span>
<br /><br />
<span>__name__ 은 모듈의 이름을 지칭한다.</span>
<br /><br />
<span>만약, 당신의 test.py 모듈의 위치가 최상위 디렉토리(directory)에 위치한다면</span><br />
<span>__name__ = test 이렇게 된다.</span><br /><br />
    
<span>그 모듈의 위치가 my_package 라는 패키지 안에 들어있다면</span><br />
<span>__name__ = my_package.test 가 되는 것이다.</span><br /><br />
    
<span style="font-size: 1.25rem;">예외 상황:</span><br /><br />
<span>1. __init__.py라는 명칭을 가진 패키지 모듈일 경우</span><br /><br />
<span>만약, 당신의 모듈이 my_package/__init__.py 의 경로를 가지고 있다면,</span><br />
<span>__name__ = my_package 이렇게 된다.</span><br /><br />
    
<span>2. 메인 모듈 안에 있을 경우</span><br /><br />
<span>만약, 당신이 python interpreter를 메인 모듈에서 구동한다면 그 땐,</span><br />
<span>__name__ = __main__ 이 되는 특수한 상황이 발생한다.</span>
<br /><br /><br />
</p>

<h2>왜 그렇게 될까?</h2>

<p>Flask의 첫 argument(인자)는 “import_name”이라고 불리운다. 그리고 이 “import_name”을 곧 “애플리케이션 패키지의 이름”이라고 설명하고있다.</p>

<p>이 <strong>“import_name”</strong>의 존재 이유는 크게 3가지로 정리할 수 있다:</p>

<ul>
  <li>파일시스템 안에서 리소스를 찾기 위해</li>
  <li>확장자를 통해 디버깅 정보를 개선하기 위해</li>
  <li>그 외 아주 많은 이유로 인해(..?)</li>
</ul>

<p>그럼 이게 다 뭔 소리일까?</p>

<h3><br />우선,</h3>

<p>여기서의 <strong>‘리소스’</strong>란 애플리케이션 구동에 필요한 <strong>‘추가적인 파일들’</strong>을 의미한다. 예를 들어, static 또는 template 파일들 말이다.</p>

<p><strong>작동원리는 다음과 같다.</strong></p>

<ol>
  <li>Flask는 “import_name”으로 넘겨진 인자를 받는다.</li>
  <li>그 인자는 import된 패키지의 명칭이다.</li>
  <li>그리고 Flask는 이 명칭을 이용해 애플리케이션 안의 경로를 찾아들어가 동일한 명칭을 가진 모듈을 파악한다.</li>
  <li>그렇게 경로를 알아내게 되면, Flask는 static 또는 template 디렉토리 명칭(directory names)을 사용해(append) 그 파일들을 취득한다.</li>
</ol>

<p>flask/helpers.py 모듈 안에는 이미 get_root_path()라는 함수가 들어있다. 이 함수를 이용하면, 당신의 애플리케이션 안에 존재하는 각 패키지들의 혹은 모듈의 경로를 찾아낸다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># 예를 들어 'microblog'라는 애플리케이션에 get_root_path() 사용해보자.
</span><span class="kn">from</span> <span class="nn">flask.helpers</span> <span class="kn">import</span> <span class="n">get_root_path</span>

<span class="c1"># the app package
</span><span class="n">get_root_path</span><span class="p">(</span><span class="s">'app'</span><span class="p">)</span>
<span class="s">'/home/miguel/microblog/app'</span>

<span class="c1"># the flask package
</span><span class="n">get_root_path</span><span class="p">(</span><span class="s">'flask'</span><span class="p">)</span>
<span class="s">'/home/miguel/microblog/venv/lib/python3.8/site-packages/flask'</span>

<span class="c1"># the config.py module
</span><span class="n">get_root_path</span><span class="p">(</span><span class="s">'config'</span><span class="p">)</span>
<span class="s">'/Users/mgrinberg/Documents/dev/python/microblog'</span>

<span class="c1"># the app/models.py module
</span><span class="n">get_root_path</span><span class="p">(</span><span class="s">'app.models'</span><span class="p">)</span>
<span class="s">'/Users/mgrinberg/Documents/dev/python/microblog/app'</span>

</code></pre></div></div>

<p>위에서 볼 수 있듯이 두 가지 경우로 나타난다.</p>

<ol>
  <li>Flask()의 <strong>“import_name”</strong>으로 애플리케이션의 “패키지 이름”을 넘겨주면, Flask는 <strong>패키지의 위치</strong>를 찾아낸다.</li>
  <li>Flask()의 <strong>“import_name”</strong>으로 애플리케이션의 “모듈 이름”을 넘겨주면, Flask는 <strong>모듈이 들어있는 패키지의 위치</strong>를 찾아낸다.</li>
</ol>

<h2><br />다음으로,</h2>

<p>Flask는 “instance floders”라는 매우 모호한 개념을 가지고 있다. 정의에 따르면, “instance floders”는 소스컨트롤의 지배를 받지 않는 설정파일(configuration files)를 저장할 수 있는 특수한 폴더라고 한다.</p>

<p>재밌는 건(말이라도 이렇게 해야..), “instance folders”의 위치를 추적하는 것 또한 <strong>“import_name”</strong>이라는 것. 즉, <strong>“import_name”</strong>을 이용해 instance의 위치를 찾고, 그곳에 subdirectory를 추가(append)하는 것이다.</p>

<p>이런 특성 때문에 root_path와 instance_path 둘 다 Flask constructor 를 통해 덮어쓸 수 있다.</p>

<h2><br />Flask 확장자를 통한 디버깅 정보 개선</h2>

<p>Flask extension(확장자)들 중 <strong>“import_name”</strong>을 사용하는 건 <strong>Flask-SQLAlchemy</strong>라고 한다.</p>

<p>Flask-SQLAlchemy는 <strong>get_debug_queries()</strong>라는 함수를 가지고 있는데 이것이 하는 일은</p>

<p><code class="language-plaintext highlighter-rouge">“collects and logs all the queries that are issued during the life of a request.”</code> 라고 한다.</p>

<p>내 멋대로 해석해보자면, 요청을 수행하는 시간 동안 발생한 모든 쿼리에 대해 기록을 남기고 수집하는 것이라고 이해할 수 있다.</p>

<p>기록하는 요소들 중에는 쿼리가 발생한(issued) 애플리케이션의 소스코드 상 위치도 있다고 한다.</p>

<h2><br />결론<br /></h2>

<p><span>여기서 기억해두면 쓸모 있을만한 개념은 다음으로 정리할 수 있을 것 같다.</span>
<br />
<br />
<span>1. 내 .py 모듈이 최상위 디렉토리에 위치할 땐, (**name**)이 모듈의 이름과 일치한다.</span><br />
<span>2. 내 .py 모듈이 어떤 패키지 안에 위치할 땐, (**name**)이 패키지.모듈의 이름과 일치한다.</span><br />
<span>3. Flask(**name**)를 하는 이유는 결국, Flask에게 나의 패키지의 경로를 알려주는 것이다. 즉, 모듈의 이름을 인자로 받아 그걸 근거로 경로를 추적해 결국 모듈이 “담긴" 패키지의 위치를 알아낸다.</span>
<br /><br />
<span>이렇게 오늘은 Flask를 사용할 때 보게 되는 Flask(__name__)에 대해 알아보았다. 이런 지식이 언젠가 나에게 실용적인 도움이 되었으면 좋겠다.</span><br /><br />
</p>]]></content><author><name>Jeong Hun Jo</name><email>tmvle22@gmail.com</email></author><category term="python" /><category term="flask" /><summary type="html"><![CDATA[passing (__name__) into Flask Class]]></summary></entry><entry><title type="html">M1 유저를 위한 Jekyll로 깃블로그 열기</title><link href="http://localhost:4000/git/gitblog-jekyll/" rel="alternate" type="text/html" title="M1 유저를 위한 Jekyll로 깃블로그 열기" /><published>2022-04-15T00:00:00+09:00</published><updated>2022-04-15T00:00:00+09:00</updated><id>http://localhost:4000/git/gitblog-jekyll</id><content type="html" xml:base="http://localhost:4000/git/gitblog-jekyll/"><![CDATA[<p><span style=" font-family: 'Gothic A1', sans-serif;font-size: 25px; font-weight: 500;">[M1 유저를 위한 Jeklly Gitblog 열기!]</span></p>

<p><span style="font-weight: 500;">M1 Mac 유저분들 중 Jekyll을 이용해 깃블로그를 처음 열고자 한다면 아래 준비사항을 미리 체크하자!</span><br /><br />
정보도 가이드도 없이 혼자 이것 저것 해보려다가 장장 열흘을 소모하며 깨달은 것들이니<br /> 
나처럼 M1 맥북도 처음, 개발도 처음, Github pages도 처음이라면 마음 급하게 먹지 말고<br />
준비사항을 모두 완료한 후 진행해보도록 하자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. MacOS를 최신으로 업데이트 하기. 업데이트 후 꼭 재부팅 먼저!!
2. M1 유저의 경우 Terminal은 "Start with Roessta" 해제하기.
2-1. Finder/Applications/ 경로의 terminal 앱에서 우클릭 후 get info를 통해 해제 가능..
3. Xcode 설치 완료하기. (몇 시간이 걸릴지 모르는 고통스러운 과정이므로 인내심 필요! 미리 깔려있다면 Lucky.)
</code></pre></div></div>

<p>위 사항들이 모두 마무리 되었다면, 이제 순서대로 진행해보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. Homebrew 설치
2. Ruby 와 Jekyll 설치
3. Jekyll theme fork하고 레포지토리 이름 바꾸기
4. 블로그 호스팅
</code></pre></div></div>

<p style="font-weight:600; font-size: 1.2rem"><br /><br />[STEP 1. Homebrew 설치하기]</p>
<p>Terminal 앱을 켠후 아래 코드를 복사 붙여넣고 Enter를 누른다.
Homebrew는 macOS용 패키지 관리자이다. <br />
Homebrew를 통해 Appple 혹은 Linux 시스템에서 제공하지 않는 유용한 패키지를 다운받고 관리할 수 있다.</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">/bin/bash -c "$</span><span class="o">(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="o">)</span><span class="s2">"</span></code></pre></figure>

<p>설치가 완료되었다면, 터미널에 <code class="language-plaintext highlighter-rouge">which brew</code> 명령어를 통해 설치 경로를 확인한다.<br />
M1 유저의 경우 아래와 같이 나왔다면 정상적으로 설치 된 것이다.<br />
설치 후 <code class="language-plaintext highlighter-rouge">[command] + q</code>를 통해 터미널을 완전히 껐다 켜야 한다.</p>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">homebrew</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">brew</span><span class="w">
</span></code></pre></div></div>

<p>만약 설치 후 homebrew가 몇 가지 command를 실시하라고 할 수도 있는데,<br />
그럴 경우에만 아래의 코드들을 차례로 실행해주자.</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">echo "eval $</span><span class="o">(</span>/opt/homebrew/bin/brew shellenv<span class="o">)</span><span class="s2">" &gt;&gt; ~/.zprofile
</span><span class="gp">eval $</span><span class="s2">(/opt/homebrew/bin/brew shellenv)</span></code></pre></figure>

<p style="font-weight:600; font-size: 1.2rem"><br /><br />[STEP 2. Ruby 와 Jekyll 설치하기]</p>

<p>Ruby를 철치하기에 앞서 Ruby Manager를 설치해야 한다.<br />
Ruby Manager는 Ruby의 버전관리를 위한 것들로 여러 종류가 있다. RVM, rbenv, asdf, chruby 등등. 그러나 서로 호환이 되지 않아 한 가지만 설치해야 한다. Jekyll 깃블로그를 열고 싶은데 Ruby 설치에서만 여러번 좌절해본 결과, chruby라는 놈이 나를 ERROR의 굴레로부터 벗어나게 해주었기 때문에 본 포스팅은 chruby를 기준으로 한다.</p>

<p>그 전에 다른 ruby managers가 설치되어 있는지 확인해보자.</p>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rvm</span><span class="w"> </span><span class="n">help</span><span class="w">
</span></code></pre></div></div>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rbenv</span><span class="w"> </span><span class="n">help</span><span class="w">
</span></code></pre></div></div>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">asdf</span><span class="w"> </span><span class="o">--</span><span class="n">help</span><span class="w">
</span></code></pre></div></div>

<p>이 Jobobdev 블로그 주인처럼 자신이 초보라면, 깔끔하게 기존의 것들을 지우고 아래의 chruby 가이드를 따르길 권장한다.</p>

<p><span style="font-weight:500; font-size: 1.1rem">아래의 명령어를 통해 chruby와 Ruby를 설치한다.</span></p>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">brew</span><span class="w"> </span><span class="n">install</span><span class="w"> </span><span class="n">chruby</span><span class="w"> </span><span class="n">ruby</span><span class="o">-</span><span class="n">install</span><span class="w">
</span></code></pre></div></div>

<p>설치가 완료 되었다면 차례대로 아래의 명령어들을 실행해주자.</p>

<p><span style="font-weight:500; font-size: 1.1rem">M1 Mac</span></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span> <span class="s">"source /opt/homebrew/opt/chruby/share/chruby/chruby.sh"</span> <span class="o">&gt;&gt;</span> <span class="o">~/</span><span class="p">.</span><span class="n">zshrc</span>
<span class="n">echo</span> <span class="s">"source /opt/homebrew/opt/chruby/share/chruby/auto.sh"</span> <span class="o">&gt;&gt;</span> <span class="o">~/</span><span class="p">.</span><span class="n">zshrc</span>
<span class="n">echo</span> <span class="s">"chruby ruby-3.1.1"</span> <span class="o">&gt;&gt;</span> <span class="o">~/</span><span class="p">.</span><span class="n">zshrc</span>
</code></pre></div></div>

<p><span style="font-weight:500; font-size: 1.1rem">혹시 Intel Mac 이라면</span></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span> <span class="s">"source /usr/local/share/chruby/chruby.sh"</span> <span class="o">&gt;&gt;</span> <span class="o">~/</span><span class="p">.</span><span class="n">zshrc</span>
<span class="n">echo</span> <span class="s">"source /usr/local/share/chruby/auto.sh"</span> <span class="o">&gt;&gt;</span> <span class="o">~/</span><span class="p">.</span><span class="n">zshrc</span>
<span class="n">echo</span> <span class="s">"chruby ruby-3.1.1"</span> <span class="o">&gt;&gt;</span> <span class="o">~/</span><span class="p">.</span><span class="n">zshrc</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">[command] + q</code>로 Terminal을 재부팅 후 잘 설치 되었는지 버전을 확인하자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby -v
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ruby 3.1.1p18</code> 버전 이상이면 문제 없다.</p>

<p>이제 Jekyll 차례이다.<br />
터미널에 아래의 명령어로 <a href="https://jekyllrb.com/">Jekyll</a>을 설치한다.</p>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span><span class="w"> </span><span class="n">install</span><span class="w"> </span><span class="n">bundler</span><span class="w"> </span><span class="n">jekyll</span><span class="w">
</span></code></pre></div></div>

<p>설치가 완료 되었다면, 다음으로 넘어가보자.</p>

<p style="font-weight:600; font-size: 1.2rem"><br /><br />[STEP 3. Jekyll theme fork하고 레포지토리 이름 바꾸기]</p>

<p>Github는 사용자들의 github page를 이용한 블로그 제작을 위해 몇 가지 테마를 제공하지만<br />
성에 차지 않으므로, Jekyll theme을 다운받아 사용할 것이다.</p>

<p>Github의 <code class="language-plaintext highlighter-rouge">username.github.io</code> Repository를 먼저 생성한 후 Jekyll theme repository를 자신의 repository로 clone하는 방법도 있지만, 항상 문제가 발생했으므로 훨씬 쉬운 방법을 소개하고자 한다.</p>

<p>먼저, 아래의 사이트들 중에서 마음에 드는 Jekyll 테마를 고른다.</p>

<ul>
  <li><a href="https://github.com/topics/jekyll-theme">GitHub.com #jekyll-theme repos</a></li>
  <li><a href="https://jamstackthemes.dev/ssg/jekyll/">jamstackthemes.dev</a></li>
  <li><a href="http://jekyllthemes.org/">jekyllthemes.org</a></li>
  <li><a href="https://jekyllthemes.io/">jekyllthemes.io</a></li>
  <li><a href="https://jekyll-themes.com/">jekyll-themes.com</a></li>
</ul>

<p>사이트마다 차이가 있지만, ‘다운로드’ 혹은 ‘Github’, ‘Homepage’ 등의 버튼을 통해 테마의 repository로 이동한다.</p>

<p>이젠 내가 적용한 <code class="language-plaintext highlighter-rouge">'al-folio'</code>테마 제작자의 방법을 따라할 것이다.<br />
<strong><em>(각자의 테마 제작자가 README.md에 설명해놓은 절차를 그대로 따르는 것을 매우매우 추천한다.)</em></strong></p>

<ul>
  <li>테마의 Github repository에서 자신의 <code class="language-plaintext highlighter-rouge">username.github.io</code>로 fork 한다.</li>
</ul>

<div class="row mt-3">
        <img width="1423" alt="al-folio-fork" src="https://user-images.githubusercontent.com/105831338/169213462-cdc88a13-48a0-4cdd-bd12-2c3d87a380b5.png" />
</div>
<div class="row mt-3">
      
</div>

<ul>
  <li>자신의 gitblog 프로젝트를 저장하고자 하는 폴더의 경로로 이동 후 jekyll을 설치한다.</li>
</ul>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">myname</span><span class="o">/</span><span class="n">Desktop</span><span class="o">/</span><span class="n">myfolder</span><span class="o">/</span><span class="w">
</span><span class="n">git</span><span class="w"> </span><span class="n">clone</span><span class="w"> </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">username</span><span class="o">/</span><span class="n">username.github.io.git</span><span class="w">
</span><span class="n">cd</span><span class="w"> </span><span class="o">&lt;</span><span class="n">your</span><span class="o">-</span><span class="n">repo</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span><span class="w">
</span><span class="n">bundle</span><span class="w"> </span><span class="n">install</span><span class="w">
</span><span class="n">bundle</span><span class="w"> </span><span class="n">exec</span><span class="w"> </span><span class="n">jekyll</span><span class="w"> </span><span class="n">serve</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>모든 명령어가 문제 없이 실행 되었다면 마지막 명령어 이후 local server를 통해 자신의 블로그를 미리 볼 수 있다.</li>
</ul>

<figure class="highlight"><pre><code class="language-jekyll" data-lang="jekyll">AutoPages: Disabled/Not configured in site.config.
Pagination: Complete, processed 1 pagination page(s)
Jekyll Diagrams: Command Not Found: mmdc
done in 0.952 seconds.
Auto-regeneration: enabled for '/jobobdev.github.io'
Server address: http://127.0.0.1:4000
Server running... press ctrl-c to stop.</code></pre></figure>

<p style="font-weight:600; font-size: 1.2rem"><br /><br />[STEP 4. 블로그 호스팅 하기]</p>
<p>지금 단계까지 문제 없지 잘 진행했다면, 이제 블로그를 자신의 것으로 만든 후 호스팅하는 것만 남았다!
아직 나 역시 그 단계를 진행중이므로 더 많은 걸 소개할 순 없지만, 당장 로컬에서 말고 실제로 자신의 github page에 블로그 페이지가 올라간 것을 확인하고 싶을 것이기 때문에 빠르게 아래의 단계를 실행해보자.</p>

<ul>
  <li>먼저, username.github.io 폴더의 _config.yml 파일을 열고 기본적인 정보들을 수정한다.</li>
  <li>아래의 사진처럼, <code class="language-plaintext highlighter-rouge">baseurl</code>은 비워두고 <code class="language-plaintext highlighter-rouge">url</code>에 자신의 github page 주소를 넣어준다.</li>
</ul>

<p><img width="754" alt="config-edit-first" src="https://user-images.githubusercontent.com/105831338/169214097-88b771d4-0e42-41aa-b5e4-0a2bad33fac9.png" /></p>

<ul>
  <li>그 다음 변경 사항들을 커밋하고 push해주면 자신의 github page 주소로 블로그가 호스팅 된 것을 확인할 수 있다.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd [블로그 repository 경로]
git add .
git commit -m "test blog"
git push
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>(수정)블로그 테마 편집이 불편하여 minimal-mistakes테마로 변경했습니다. 링크: “https://github.com/mmistakes/minimal-mistakes”</strong></p>]]></content><author><name>Jeong Hun Jo</name><email>tmvle22@gmail.com</email></author><category term="git" /><category term="jekyll" /><summary type="html"><![CDATA[[M1 유저를 위한 Jeklly Gitblog 열기!]]]></summary></entry></feed>